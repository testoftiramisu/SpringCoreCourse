package com.epam.spring.hometask.dao.auditorium;

import com.epam.spring.hometask.dao.config.DataSourceConfig;
import com.epam.spring.hometask.domain.Auditorium;
import com.epam.spring.hometask.service.id.IdGeneratorService;
import com.google.common.collect.ImmutableSet;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.Collection;
import java.util.Set;

public class CinemaAuditoriumDao implements AuditoriumDao {
  private static final String GET_ALL = "SELECT * FROM AUDITORIUM";
  private static final String GET_BY_ID = "SELECT * FROM AUDITORIUM WHERE id = ?";
  private static final String SAVE =
      "INSERT INTO AUDITORIUM (id, name, number_of_seats) VALUES (?, ?, ?)";
  private static final String UPDATE =
      "UPDATE AUDITORIUM SET name = ?, number_of_seats = ? WHERE id = ?";
  private static final String REMOVE = "DELETE FROM AUDITORIUM WHERE name = ?";

  private final ApplicationContext context =
      new AnnotationConfigApplicationContext(DataSourceConfig.class);
  private IdGeneratorService idGeneratorService;
  private JdbcTemplate jdbcTemplate = context.getBean("jdbcTemplate", JdbcTemplate.class);

  public CinemaAuditoriumDao(IdGeneratorService idGeneratorService) {
    this.idGeneratorService = idGeneratorService;
  }

  /** Returns an immutable set of all auditoriums. */
  @Override
  public Set<Auditorium> getAll() {
    return ImmutableSet.copyOf(
        jdbcTemplate.query(GET_ALL, new BeanPropertyRowMapper<>(Auditorium.class)));
  }

  /**
   * Adds the given {@link Auditorium} to the storage and assign it an autogenerated id.
   *
   * @param auditorium which needs to be added to storage
   */
  @Override
  public void addAuditorium(Auditorium auditorium) {
    jdbcTemplate.update(
        SAVE, idGeneratorService.getId(), auditorium.getName(), auditorium.getNumberOfSeats());
  }

  /**
   * Returns a {@code Auditorium} if auditorium with provided id is found in the storage .
   *
   * @param id that used as search criteria
   */
  public Auditorium getById(Long id) {
    return jdbcTemplate.queryForObject(
        GET_BY_ID, new Object[] {id}, new BeanPropertyRowMapper<>(Auditorium.class));
  }

  /**
   * Adds all {@link Auditorium} from provided Collection to the storage.
   *
   * @param auditoriums collection of {@link Auditorium} that needs to be added to storage
   */
  @Override
  public void setAuditoriums(Collection<Auditorium> auditoriums) {
    auditoriums.forEach(this::addAuditorium);
  }

  /**
   * Returns a {@code Auditorium} if auditorium with provided name is found in the storage .
   *
   * <p>Returns null otherwise.
   *
   * @param name of auditorium that used as search criteria
   */
  @Override
  public Auditorium findByName(String name) {
    return getAll()
        .stream()
        .filter(auditorium -> auditorium.getName().equals(name))
        .findAny()
        .orElse(null);
  }

  /**
   * Removes the given {@code Auditorium} from the storage by name.
   *
   * @param auditorium for removing
   */
  public void remove(Auditorium auditorium) {
    jdbcTemplate.update(REMOVE, auditorium.getName());
  }
}
